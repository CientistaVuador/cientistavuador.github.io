[[id]] 1
[[languages]] en-us, pt-br


[[title<en-us>]] Blinn Phong with Roughness Textures
[[description<en-us>]] This article explains a method for using roughness textures with blinn phong.
[[date<en-us>]] 2024/09/28 15:33, Updated at 2024/09/29 22:46

[[title<pt-br>]] Blinn Phong com Texturas de Roughness
[[description<pt-br>]] Esse artigo explica um método para utilizar texturas de roughness com blinn phong.
[[date<pt-br>]] 2024/09/28 15:33, Atualizado em 2024/09/29 22:46


[[section<en-us>]] Introduction
[text<en-us>]
So, you finished your OpenGL blinn phong tutorial and now you rush
to google (or whatever search engine you are using) in search of
good looking 4K textures to test it, you end up in websites such as
[[[https://cc0-textures.com/:::CC0 Textures]]] and [[[https://ambientcg.com/:::Ambient CG]]]
you find a good texture and download it, you look at the textures and find what
you expected: a color, a normal, a height but there's one you don't know exactly 
what it is, a texture called roughness, you open it up and it looks like a specular
texture, so you load it as a specular, but wait, what shininess value should I use?
there's nothing on the description of the texture or anything, so you try a random
shininess based on the texture type (high for tiles, low for rocks...) and it doesn't work
well, you now go back to google and find out that for more than a decade everyone
was now using [[[https://en.wikipedia.org/wiki/Physically_based_rendering:::PBR]]]
textures and that you may need to learn a much more complicated
way to render things and you end up getting frustated as what you have learned
may have become worthless today.
[;<;>]
[text<en-us>]
This is why this article was made, to show you how to adapt a old
blinn phong rendering system to a roughness texture, without the
need to change material properties (I won't be using materials at all),
the adaptation is very simple and the results are very good for something
that was made in the 70s.
[;<;>]
[[text<en-us>]] This was based on this very old article: [[[https://www.rorydriscoll.com/2009/01/25/energy-conservation-in-games/:::Energy Conservation In Games]]]


[[section<pt-br>]] Introdução
[text<pt-br>]
Então, você terminou seu tutorial de blinn phong no OpenGL e agora você
corre para o google (ou qualquer que seja o motor de busca que esteja usando) em procura
de boas texturas em 4K para testar, você termina em sites como
[[[https://cc0-textures.com/:::CC0 Textures]]] e [[[https://ambientcg.com/:::Ambient CG]]]
você encontra uma boa textura e baixa ela, você olha as texturas e encontra o que esperava:
uma cor, um normal, um height mas tem uma que você não sabe exatamente o que é,
uma textura chamada roughness, você abre ela e ela se parece com uma textura de specular
então você carrega ela como uma de specular, mas espera, que valor de shininess eu deveria usar?
não tem nada na descrição da textura ou em outros lugares, então você tenta uma shininess
aleatória baseada no tipo da textura (alta para pisos, baixa para rochas...) e não funciona
bem, então você volta para o google e descobre que por mais de uma década todo mundo agora
estava usando texturas de 
[[[https://pt.wikipedia.org/wiki/Renderiza%C3%A7%C3%A3o_baseada_em_f%C3%ADsica:::PBR]]]
e que agora você talvez precise aprender um jeito muito mais complicado de renderizar coisas
e você termina ficando frustado já que o que aprendeu pode ter se tornado inútil nos dias
de hoje.
[;<;>]
[text<pt-br>]
É por isso que esse artigo foi feito, para mostrar a você como adaptar um velho
sistema de blinn phong para uma textura de roughness, sem a necessidade de mudar
as propriedades dos materiais (nem usarei materiais na verdade),
a adaptação é bem simples e os resultados são ótimos para algo que foi feito
nos anos 70.
[;<;>]
[[text<pt-br>]] Isso foi baseado nesse artigo bem antigo (em inglês): [[[https://www.rorydriscoll.com/2009/01/25/energy-conservation-in-games/:::Energy Conservation In Games]]]

[[section<en-us>]] "Fixing" Blinn Phong Specular
[[section<pt-br>]] "Arrumando" o Specular do Blinn Phong
[text<en-us>]
One of the things you may or may not have noticed is that when using
low shininess values, blinn phong may generate a cone shaped specular
at the dark side of a mesh, this is a not a problem with blinn phong itself
but most tutorials don't talk about it.
[;<;>]
[text<pt-br>]
Uma das coisas que você pode ou não pode ter percebido é que quando
valores baixos de shininess são utilizados, blinn phong pode gerar um specular
em formato de cone no lado escuro de uma mesh, isso não é um problema com blinn phong
em si mas grande parte dos tutoriais não falam sobre ele.
[;<;>]
[[image]] /resources/1/Cone shaped specular.png
[text<en-us>]
To fix it simply multiply the specular factor by the diffuse factor.
[;<;>]
[text<pt-br>]
Para arrumar simplesmente multiplique o fator de specular pelo fator de diffuse.
[;<;>]
[code]
vec3 halfwayDirection = -normalize(lightDirection + viewDirection);
float diffuseFactor = max(dot(normal, -lightDirection), 0.0);
float specularFactor = pow(max(dot(normal, halfwayDirection), 0.0), shininess) * diffuseFactor;
[;<;>]
[[image]] /resources/1/Fixed cone shaped specular.png


[[section<en-us>]] A Directional Light
[[section<pt-br>]] Uma Luz Direcional
[code]
            vec3 directionalLight(
                vec3 lightDirection, vec3 viewDirection, vec3 normal,
                vec3 diffuseColor, vec3 specularColor, float shininess
            ) {
                vec3 halfwayDirection = -normalize(lightDirection + viewDirection);
                float diffuseFactor = max(dot(normal, -lightDirection), 0.0);
                float specularFactor = pow(max(dot(normal, halfwayDirection), 0.0), shininess) * diffuseFactor;
                
                vec3 diffuse = diffuseFactor * diffuseColor;
                vec3 specular = specularFactor * specularColor;
                vec3 ambient = 0.10 * diffuseColor;
                
                return diffuse + specular + ambient;
            }
[;<;>]
[text<en-us>]
This is how a basic directional light usually looks like, we have the light direction,
the view direction (the direction from the camera to the fragment ```normalize(position - camera)```)
the normal of the surface and the diffuseColor and specularColor from materials/textures and a shininess value
from the material, for simplicity I removed the light colors vectors.
[;<;>]
[text<pt-br>]
É assim que uma luz direcional básica normalmente se parece, nós temos a direção da luz (lightDirection),
a direção de view (viewDirection) (a direção da câmera para o fragment ```normalize(position - camera)```)
o normal da superfície e o diffuseColor e o specularColor dos materiais/texturas e um valor de shininess
do material, para manter a simplicidade, eu removi os vetores de cores da luz.
[;<;>]
[fine<en-us>]
I won't talk about point lights or spot lights here, as a point light is a directional light
constrained by distance and a spot light is a point light constrained by a angle.
[;<;>]
[fine<pt-br>]
Não vou falar sobre point lights ou spot lights aqui, já que uma point light é uma luz direcional
restringida por uma distância e uma spot light é uma point light restringida por um ângulo.
[;<;>]
[[text<en-us>]] This is how it looks on this [[[https://cc0-textures.com/t/th-brown-leather:::leather texture]]] only with color and normal textures, with 64.0 of shininess.
[[text<pt-br>]] É assim que se parece nessa [[[https://cc0-textures.com/t/th-brown-leather:::textura de couro]]] somente com as texturas de cor e normal, com 64.0 de shininess.
[[image]] /resources/1/Directional light on leather.png


[[section<en-us>]] Shininess value from a roughness value
[[section<pt-br>]] Valor de shininess de um valor de roughness
[text<en-us>]
Calculating a shininess value from a roughness value is very easy, we can use a pow function
and a maximum shininess value, 2048 is good for most purposes, you can put it in your
material if you want too.
[;<;>]
[text<pt-br>]
Calcular um valor de shininess a partir de um valor de roughness é bem fácil, podemos usar uma função de pow
e um valor máximo de shininess, 2048 é bom para a maioria dos casos, você pode colocar isso no seu material
se quiser também.
[;<;>]
[code]
#define MAX_SHININESS 2048.0

float shininess = pow(MAX_SHININESS, 1.0 - roughness);
[;<;>]
[[text<en-us>]] And now it looks worse than before
[[text<pt-br>]] E agora está pior do que antes.
[[image]] /resources/1/Worse than before.png
[[text<en-us>]] This is because we also need the specular intensity to vary with the shininess.
[[text<pt-br>]] Isso é porque também precisamos que a intensidade do specular varie com a shininess.


[[section<en-us>]] Specular intensity from a shininess value
[[section<pt-br>]] Intensidade de specular de um valor de shininess
[text<en-us>]
This wasn't made by me, you should check this [[[https://www.farbrausch.de/~fg/articles/phong.pdf:::pdf]]] for further details.
[;<;>]
[text<pt-br>]
Isso não foi feito por mim, você deveria checar esse [[[https://www.farbrausch.de/~fg/articles/phong.pdf:::pdf]]] (em inglês) para mais detalhes.
[;<;>]
[code<en-us>]
#define PI 3.14159265359

float normalization = ((shininess + 2.0) * (shininess + 4.0)) / (8.0 * PI * (pow(2.0, -shininess * 0.5) + shininess));
//and multiply the specular factor by it.
...
float specularFactor = pow(max(dot(normal, halfwayDirection), 0.0), shininess) * diffuseFactor * normalization;
[;<;>]
[code<pt-br>]
#define PI 3.14159265359

float normalization = ((shininess + 2.0) * (shininess + 4.0)) / (8.0 * PI * (pow(2.0, -shininess * 0.5) + shininess));
//e multiplique o fator de specular por ele
...
float specularFactor = pow(max(dot(normal, halfwayDirection), 0.0), shininess) * diffuseFactor * normalization;
[;<;>]
[text<en-us>]
And this is how it looks now.
[;<;>]
[text<pt-br>]
E é assim que se parece agora.
[;<;>]
[[image]] /resources/1/Still looks bad.png
[text<en-us>]
It still looks kind of bad, this is because we need to do one more thing.
[;<;>]
[text<pt-br>]
Ainda está um pouco ruim, isso é porque precisamos fazer mais uma coisa.
[;<;>]


[[section<en-us>]] Specular and diffuse material colors must sum to 1 at maximum
[[section<pt-br>]] Specular e diffuse dos materiais deve somar para 1 no máximo
[text<en-us>]
This is to remain "energy conserving", it can easily be done on the shader by
multiplying the light's diffuse and specular factors by a constant, if
you want more specular, you will need to decrease the diffuse and vice versa,
I usually use a very low specular value of 5%, but you can increase if you want (remember
to decrease the diffuse!), if you need more control you can place it in your material too.
[;<;>]
[text<pt-br>]
Isso é para manter a "conservação de energia", pode ser facilmente fefito no shader
multiplicando os fatores de diffuse e specular da luz por uma constante, se você quer
mais specular, você terá que diminuir o diffuse e vice versa, eu normalmente uso
um valor bem baixo de specular de 5%, mas você pode aumentar se quiser (lembre-se de
diminuir o diffuse!), se você quer mais controle pode colocar no seu material também.
[;<;>]
[code]
#define DIFFUSE_INTENSITY 0.95
#define SPECULAR_INTENSITY 0.05

float diffuseFactor = ...
float specularFactor = ...
diffuseFactor *= DIFFUSE_INTENSITY;
specularFactor *= SPECULAR_INTENSITY;
[;<;>]
[text<en-us>]
And this is how it looks now, with a very faint specular, it is much better now.
[;<;>]
[text<pt-br>]
E é assim que se parece agora, com um specular bem fraco, está muito melhor agora.
[;<;>]
[[image]] /resources/1/Final result.png
[[text<en-us>]] This is the final code.
[[text<pt-br>]] Esse é o código final.
[code]
            #define PI 3.14159265359
            #define MAX_SHININESS 2048.0
            #define DIFFUSE_INTENSITY 0.95
            #define SPECULAR_INTENSITY 0.05
            
            vec3 directionalLight(
                vec3 lightDirection, vec3 viewDirection, vec3 normal,
                vec3 diffuseColor, vec3 specularColor, float roughness
            ) {
                float shininess = pow(MAX_SHININESS, 1.0 - roughness);
                float normalization = ((shininess + 2.0) * (shininess + 4.0)) / (8.0 * PI * (pow(2.0, -shininess * 0.5) + shininess));
                
                vec3 halfwayDirection = -normalize(lightDirection + viewDirection);
                float diffuseFactor = max(dot(normal, -lightDirection), 0.0);
                float specularFactor = pow(max(dot(normal, halfwayDirection), 0.0), shininess) * diffuseFactor * normalization;
                
                diffuseFactor *= DIFFUSE_INTENSITY;
                specularFactor *= SPECULAR_INTENSITY;
                
                vec3 diffuse = diffuseFactor * diffuseColor;
                vec3 specular = specularFactor * specularColor;
                vec3 ambient = 0.10 * diffuseColor;
                
                return diffuse + specular + ambient;
            }
[;<;>]
[fine<en-us>]
If you are rendering multiple lights on the same shader, it is better to
calculate the shininess and normalization once and pass them as function arguments.
[;<;>]
[fine<pt-br>]
Se você está renderizando múltiplas luzes no mesmo shader, é melhor
calcular o shininess e normalization apenas uma vez e passar eles como argumentos de funções.
[;<;>]


[[section<en-us>]] Results
[[section<pt-br>]] Resultados
[[text<en-us>]] Those are the final results, all of these textures come from [[[https://cc0-textures.com/:::CC0 Textures]]]
[[text<pt-br>]] Esses são os resultados finais, todas essas texturas vem de [[[https://cc0-textures.com/:::CC0 Textures]]] (em inglês)
[[image]] /resources/1/final bricks.png
[[image]] /resources/1/final leather.png
[[image]] /resources/1/final rock.png
[[image]] /resources/1/final stone tiles.png
[[image]] /resources/1/final tiles.png
[[image]] /resources/1/final wood.png
[text<en-us>]
And without configuring any material!
using only three textures (color, normal and roughness).
[;<;>]
[text<pt-br>]
E sem configurar nenhum material!
usando apenas três texturas (cor, normal e roughness).
[;<;>]