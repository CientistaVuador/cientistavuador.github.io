[[id]] 3
[[languages]] en-us, pt-br

[[title<en-us>]] Blinn Phong with Metallic Textures
[[description<en-us>]] Follow up of the Roughness Article, now with Metallic Textures.
[[title<pt-br>]] Blinn Phong com Textures de Metallic
[[description<pt-br>]] Seguimento do Artigo de Roughness, agora com Texturas Metallic.
[[date]] 2024/10/04 01:24

[[section<en-us>]] Introduction
[[section<pt-br>]] Introdução

[text<en-us>]
This is a follow up of [[[/articles/1_en-us.html:::Blinn Phong with Roughness Textures]]]
[;<;>]

[text<pt-br>]
Isso é o seguimento de [[[/articles/1_pt-br.html:::Blinn Phong com Texturas de Roughness]]]
[;<;>]

[[subsection<en-us>]] Washed colors
[[subsection<pt-br>]] Cores lavadas
[text<en-us>]
In very dark and very rough textures there can still be a very small specular
causing the texture to look washed out, this can be undesirable if the texture
was not supposed to have specular at all, such as doom style sprites or half
life 1 textures.
[;<;>]
[text<pt-br>]
Em texturas bem escuras e bem ásperas (roughness alto) ainda pode ter um
pequeno specular fazendo a textura parecer lavada, isso pode ser indesejável
se a textura não foi feita pra ter specular, como sprites do doom ou texturas
do half life 1.
[;<;>]
[[image]] /resources/3/Washed Color.png
[text<en-us>]
What we can do is to calculate the normalization for the smaller shininess
we can have, which is 1.0, and then use it to shift the normalization.
[;<;>]
[text<pt-br>]
O que nós podemos fazer é calcular a normalização para o menor shininess
que podemos ter, que é 1.0, e então usar ele para mover a normalização.
[;<;>]
[code]
float normalization = ((shininess + 2.0) * (shininess + 4.0)) / (8.0 * PI * (pow(2.0, -shininess * 0.5) + shininess));
normalization = max(normalization - 0.3496155267919281, 0.0);
[;<;>]
[text<en-us>]
The max function is to avoid the normalization from going negative
and causing undefined behaviour (due to floating point imprecision).
[;<;>]
[text<pt-br>]
A função max é para evitar que a normalização se torne negativa
e cause comportamento indefinido (por causa da imprecisão de float).
[;<;>]
[[image]] /resources/3/Pitch Black.png
[text<en-us>]
The texture is now pitch-black as it was supposed to be.
[;<;>]
[text<pt-br>]
A textura agora está completamente preta, como deveria ser.
[;<;>]

[[subsection<en-us>]] Diffuse Energy Conservation
[[subsection<pt-br>]] Conservação de Energia Difusa
[text<en-us>]
From [[[https://www.rorydriscoll.com/2009/01/25/energy-conservation-in-games/:::Energy Conservation In Games]]]
[;<;>]
[text<pt-br>]
De [[[https://www.rorydriscoll.com/2009/01/25/energy-conservation-in-games/:::Energy Conservation In Games]]] (em inglês)
[;<;>]
[text<en-us>]
The author suggests dividing the material diffuse color by PI but
this would cause the scene to become darker which would require
the light to be multiplied by PI in order for the diffuse to
remain as bright as it was.
[;<;>]
[text<pt-br>]
O autor sugere dividir o diffuse do material por PI mas
isso iria tornar a cena inteira mais escura que então
iria necessitar da luz ser multiplicada por PI para
que possa retornar ao seu estado de brilho anterior.
[;<;>]
[text<en-us>]
Instead of doing this, we can simply multiply the normalization
by PI, which would be the same as dividing the diffuse by PI
and increasing the light intensity by PI.
[;<;>]
[text<pt-br>]
Ao invés de fazer isso, nós podemos simplesmente multiplicar
a normalização por PI, que seria o mesmo que dividir o diffuse
por PI e então aumentar a intensidade da luz por PI.
[;<;>]
[code]
float normalization = ((shininess + 2.0) * (shininess + 4.0)) / (8.0 * PI * (pow(2.0, -shininess * 0.5) + shininess));
normalization = max(normalization - 0.3496155267919281, 0.0) * PI;
[;<;>]
[text<en-us>]
This is how it looks now, with a stronger specular.
[;<;>]
[text<pt-br>]
É assim que se parece agora, com um especular mais forte.
[;<;>]
[[image]] /resources/3/Strong Specular.png

[[section<en-us>]] Metallic Texture
[[section<pt-br>]] Textura Metallic
[text<en-us>]
So, a metallic (or metalness) texture defines if the surface is a metal or not,
but because it usually goes from 0 to 255 or 0 to 1 (if normalized) and because
there's no such thing as a "half metal", it in practice defines a linear
interpolation between a non metallic version of the material and
a metallic version of the material.
[;<;>]
[text<pt-br>]
Então, uma textura de metallic (ou metalness) define se a superfície é um metal
ou não mas como ela normalmente vai de 0 a 255 ou de 0 a 1 (se normalizada) e
como não existe tal coisa como "meio metal", em prática ela define
uma interpolação linear entre a versão não metálica do material
e a versão metálica do material.
[;<;>]
[code]
vec3 outputColor = mix(nonMetallicOutputColor, metallicOutputColor, metallic);
[;<;>]

[[section<en-us>]] Metals
[[section<pt-br>]] Metais
[text<en-us>]
So, what does make a metal look like a metal? let's look at the most
metallic and shiny thing everyone owns, a mirror.
[;<;>]
[text<pt-br>]
Então, o que faz um metal se parecer com um metal? vamos olhar a coisa
mais metálica e brilhante que todo mundo tem, um espelho.
[;<;>]
[[image]] /resources/3/Mirror.png
[text<en-us>]
Looking at a mirror we see two things:
[;<;>]
[text<pt-br>]
Olhando um espelho nós vemos duas coisas:
[;<;>]
[ulist<en-us>]
,It is fully reflective.
,It has no diffuse or shadows at all (look at the shadows in the wood surface).
[;<;>]
[ulist<pt-br>]
,É totalmente refletivo.
,Não tem diffuse ou sombras (olhe as sombras na superfície de "madeira").
[;<;>]
[text<en-us>]
Now, let's look at another example (this is from a candy bar, but it has the properties of a metal):
[;<;>]
[text<pt-br>]
Agora, vamos olhar outro exemplo (isso é de um doce, mas tem as propriedades de um metal):
[;<;>]
[[image]] /resources/3/Yellow Metal.png
[text<en-us>]
And this is what we see:
[;<;>]
[text<pt-br>]
E é isso que nós vemos:
[;<;>]
[ulist<en-us>]
,It has a little bit of diffuse,, so it's not fully metallic.
,The color of the reflection seems to have the same color as it's surface.
[;<;>]
[ulist<pt-br>]
,Ele tem um pouco de diffuse,, então não é totalmente metálico.
,A cor do reflexo parece ter a mesma cor que a sua superfície.
[;<;>]
[text<en-us>]
So, from those small observations we see that:
[;<;>]
[text<pt-br>]
Então, dessas pequenas observações nós vemos que:
[;<;>]
[ulist<en-us>]
,Metals are fully reflective.
,Metals have almost no diffuse at all.
,The color of the reflection has the same color as the metal.
[;<;>]
[ulist<pt-br>]
,Metais são totalmente refletivos.
,Metais quase não possuem diffuse.
,A cor do reflexo tem a mesma cor do metal.
[;<;>]

[[section<en-us>]] In code
[[section<pt-br>]] Em código

[text<en-us>]
This is how this [[[https://cc0-textures.com/t/cc0t-metal-047-a:::copper texture]]] currently looks like.
[;<;>]
[text<pt-br>]
É assim que essa [[[https://cc0-textures.com/t/cc0t-metal-047-a:::textura de cobre]]] atualmente se parece.
[;<;>]
[[image]] /resources/3/Plastic Copper.png
[text<en-us>]
It does not look like a metal at all, it looks like plastic.
[;<;>]
[text<pt-br>]
Não se parece com um metal, se parece como plástico.
[;<;>]

[[subsection<en-us>]] Lighting
[[subsection<pt-br>]] Iluminação
[text<en-us>]
So, what we need to do is actually quite simple, we only need to multiply the specularFactor
by the diffuseColor and mix it with the current sum of light components using the metallic value,
we also must remember to move both DIFFUSE_INTENSITY and SPECULAR_INTENSITY to the diffuse and
specular light calculation as a metal is 0.0 diffuse and 1.0 specular
(the specular is a reflection of the light).
[;<;>]
[text<pt-br>]
Então, o que nós temos que fazer é na verdade bem simples, nós só precisamos multiplicar o
specularFactor pelo diffuseColor e misturar (função mix) com a soma atual de componentes de luz usando
o valor de metallic, também temos que nos lembrar de mover ambos DIFFUSE_INTENSITY e SPECULAR_INTENSITY
para o cálculo de luz do diffuse e do specular já que um metal é 0.0 diffuse e 1.0 specular.
[;<;>]
[[text<en-us>]] So this
[[text<pt-br>]] Então isso
[code]
diffuseFactor *= DIFFUSE_INTENSITY;
specularFactor *= SPECULAR_INTENSITY;

vec3 diffuse = diffuseFactor * diffuseColor;
vec3 specular = specularFactor * specularColor;
vec3 ambient = 0.10 * diffuseColor;

return diffuse + specular + ambient;
[;<;>]
[[text<en-us>]] Becomes this
[[text<pt-br>]] Se torna isso
[code]
vec3 diffuse = diffuseFactor * diffuseColor * DIFFUSE_INTENSITY;
vec3 specular = specularFactor * specularColor * SPECULAR_INTENSITY;
vec3 ambient = 0.10 * diffuseColor;

return mix(diffuse + specular + ambient, specularFactor * diffuseColor, metallic);
[;<;>]
[[text<en-us>]] And the full code is:
[[text<pt-br>]] E o código completo é:
[code]
vec3 directionalLight(
    vec3 lightDirection, vec3 viewDirection, vec3 normal,
    vec3 diffuseColor, vec3 specularColor,
    float roughness, float metallic
) {
    float shininess = pow(MAX_SHININESS, 1.0 - roughness);
    float normalization = ((shininess + 2.0) * (shininess + 4.0)) / (8.0 * PI * (pow(2.0, -shininess * 0.5) + shininess));
    normalization = max(normalization - 0.3496155267919281, 0.0) * PI;
    
    vec3 halfwayDirection = -normalize(lightDirection + viewDirection);
    float diffuseFactor = max(dot(normal, -lightDirection), 0.0);
    float specularFactor = pow(max(dot(normal, halfwayDirection), 0.0), shininess) * diffuseFactor * normalization;
    
    vec3 diffuse = diffuseFactor * diffuseColor * DIFFUSE_INTENSITY;
    vec3 specular = specularFactor * specularColor * SPECULAR_INTENSITY;
    vec3 ambient = 0.10 * diffuseColor;
    
    return mix(diffuse + specular + ambient, specularFactor * diffuseColor, metallic);
}
[;<;>]
[fine<en-us>]
At this point, the specularColor may have no more uses and can be removed.
[;<;>]
[fine<pt-br>]
A esse ponto, o specularColor pode não ter mais usos e pode ser removido.
[;<;>]
[text<en-us>]
And this is how it looks now:
[;<;>]
[text<pt-br>]
E é assim que se parece agora:
[;<;>]
[[image]] /resources/3/Dark Copper.png
[text<en-us>]
The specular now has the color of the metal and it looks fully black because it has nothing
to reflect.
[;<;>]
[text<pt-br>]
O specular agora tem a cor do metal e ele está totalmente preto pois não tem nada para
refletir.
[;<;>]

[[subsection<en-us>]] Reflection
[[subsection<pt-br>]] Reflexo
[text<en-us>]
We can now create a function that does the reflection for us.
[;<;>]
[text<pt-br>]
Podemos agora criar uma função que faz o reflexo para nós.
[;<;>]
[code]
vec3 computeReflection(
    samplerCube cube,
    vec3 viewDirection,
    vec3 normal,
    vec3 diffuseColor,
    float metallic
) {
    vec3 reflectedColor = texture(cube, reflect(viewDirection, normal)).rgb;
    return mix(vec3(0.0), reflectedColor * diffuseColor, metallic);
}
[;<;>]
[text<en-us>]
If you already know the basics of cubemaps (and if you don't, you should go [[[https://learnopengl.com/Advanced-OpenGL/Cubemaps:::learn it]]])
this is nothing new, we are sampling the cubemap by the reflection of the viewDirection with the normal of the surface
and returning a mix between zero (because we don't have reflections for non metals yet) and the reflection color
multiplied by the diffuse color using the metallic value.
[;<;>]
[text<pt-br>]
Se você já sabe os básicos de cubemaps (e se você não sabe, você deveria ir [[[https://learnopengl.com/Advanced-OpenGL/Cubemaps:::aprender]]] (em inglês))
isso não é nada novo, estamos fazendo o sampling do cubemap pelo reflexo do viewDirection com o normal da superfície
e returnando uma mistura (função mix) entre zero (pois não temos reflexos para não metais ainda) e a cor do reflexo
multiplicada pela cor do diffuse usando o valor do metallic.
[;<;>]
[[text<en-us>]] We then add it to our final output color.
[[text<pt-br>]] Nós então adicionamos para a nossa saída final.
[code]
output += computeReflection(reflection, viewDirection, normal, color.rgb, metallic);
[;<;>]
[[text<en-us>]] And this is what we get.
[[text<pt-br>]] E é isso que nós temos.
[[image]] /resources/3/Shiny Copper.png
[text<en-us>]
And it looks like a metal now, but there's one more problem, the copper
was supposed to be quite rough actually and it looks shiny because we
are not taking the roughness into account.
[;<;>]
[text<pt-br>]
E se parece com um metal agora, mas tem mais um problema, o cobre
era pra ser bem áspero na verdade (roughness alto) e ele parece brilhante
pois não estamos levando a roughness em conta.
[;<;>]

[[subsection<en-us>]] The Roughness Problem
[[subsection<pt-br>]] O Problema da Roughness
[text<en-us>]
The issue is that roughness on a cubemap would require a filtered cubemap such as
one from a [[[https://learnopengl.com/PBR/IBL/Specular-IBL:::Specular IBL]]] and
this would take some time to do, and if we are going to use PBR techniques, why
use Blinn Phong after all? there has to be some easy alternative.
[;<;>]
[text<pt-br>]
O problema é que a roughness em um cubemap iria precisar de um cubemap filtrado
como um dos usados em [[[https://learnopengl.com/PBR/IBL/Specular-IBL:::IBL de Specular]]]
(em inglês) e isso iria levar um tempo para fazer, e se nós vamos usar técnicas de PBR, por quê
usar Blinn Phong mesmo? deve ter uma alternativa mais fácil.
[;<;>]
[[subsection<en-us>]] The Easy Alternative
[[subsection<pt-br>]] A Alternativa Fácil
[text<en-us>]
Well, if we can't filter the cubemap, we can at least try to fake roughness
by decreasing the resolution of the cubemap using the mipmaps, which is quite
easy, we only need to calculate the amount of mipmaps and then multiply it
by the roughness.
[;<;>]
[text<pt-br>]
Bom, se não podemos filtrar o cubemap, podemos pelo menos tentar falsificar
uma roughness diminuindo a resolução dos cubemaps com os mipmaps, que é
bem fácil, nós só precisamos calcular a quantidade de mipmaps e então
multiplicar pela roughness.
[;<;>]
[code]
vec3 computeReflection(
    samplerCube cube,
    vec3 viewDirection,
    vec3 normal,
    vec3 diffuseColor,
    float metallic,
    float roughness
) {
    ivec2 cubemapSize = textureSize(cube, 0);
    float mipLevels = 1.0 + floor(log2(max(float(cubemapSize.x), float(cubemapSize.y))));
    float lodLevel = mipLevels * roughness;
    
    vec3 reflectedColor = textureLod(cube, reflect(viewDirection, normal), lodLevel).rgb;
    return mix(vec3(0.0), reflectedColor * diffuseColor, metallic);
}
[;<;>]
[text<en-us>]
Also, remember to enable seamless cubemaps:
[;<;>]
[text<pt-br>]
Também, lembre-se de ativar cubemaps seamless:
[;<;>]
[code]
glEnable(GL_TEXTURE_CUBE_MAP_SEAMLESS);
[;<;>]
[[image]] /resources/3/Quite Shiny Copper.png
[text<en-us>]
And it still looks quite shiny, we can make the reflections more rough by
taking the square root of the roughness.
[;<;>]
[text<pt-br>]
E ainda se parece bem brilhante, nós podemos deixar os reflexos mais ásperos
pegando a raiz quadrada da roughness.
[;<;>]
[code]
float lodLevel = mipLevels * sqrt(roughness);
[;<;>]
[[text<en-us>]] And this is how it looks:
[[text<pt-br>]] E é assim que se parece agora:
[[image]] /resources/3/Quite Rough Copper.png
[[text<en-us>]] It is better now.
[[text<pt-br>]] Está melhor agora.

[[subsection<en-us>]] Final Code
[[subsection<pt-br>]] Código Final
[text<en-us>]
And this is the final code, with the specularColor already removed from the light function,
as we already have the metallic value for changing the color of the specular.
[;<;>]
[text<pt-br>]
E esse é o código final, com o specularColor já removido da função da luz,
já que já temos o valor do metallic para mudar a cor do specular.
[;<;>]
[code]
            vec3 directionalLight(
                vec3 lightDirection,
                vec3 viewDirection,
                vec3 normal,
                vec3 diffuseColor,
                float metallic,
                float roughness
            ) {
                float shininess = pow(MAX_SHININESS, 1.0 - roughness);
                float normalization = ((shininess + 2.0) * (shininess + 4.0)) / (8.0 * PI * (pow(2.0, -shininess * 0.5) + shininess));
                normalization = max(normalization - 0.3496155267919281, 0.0) * PI;
                
                vec3 halfwayDirection = -normalize(lightDirection + viewDirection);
                float diffuseFactor = max(dot(normal, -lightDirection), 0.0);
                float specularFactor = pow(max(dot(normal, halfwayDirection), 0.0), shininess) * diffuseFactor * normalization;
                
                vec3 diffuse = diffuseFactor * diffuseColor * DIFFUSE_INTENSITY;
                vec3 specular = vec3(specularFactor) * SPECULAR_INTENSITY;
                vec3 ambient = 0.10 * diffuseColor;
                
                return mix(diffuse + specular + ambient, specularFactor * diffuseColor, metallic);
            }
            
            vec3 computeReflection(
                samplerCube cube,
                vec3 viewDirection,
                vec3 normal,
                vec3 diffuseColor,
                float metallic,
                float roughness
            ) {
                ivec2 cubemapSize = textureSize(cube, 0);
                float mipLevels = 1.0 + floor(log2(max(float(cubemapSize.x), float(cubemapSize.y))));
                float lodLevel = mipLevels * sqrt(roughness);
                
                vec3 reflectedColor = textureLod(cube, reflect(viewDirection, normal), lodLevel).rgb;
                return mix(vec3(0.0), reflectedColor * diffuseColor, metallic);
            }
[;<;>]

[[section<en-us>]] Final Results
[[section<pt-br>]] Resultados Finais
[[text<en-us>]] Those are the final results, all of these textures come from [[[https://cc0-textures.com/:::CC0 Textures]]]
[[text<pt-br>]] Esses são os resultados finais, todas essas texturas vem de [[[https://cc0-textures.com/:::CC0 Textures]]] (em inglês)
[[image]] /resources/3/Final Steel.png
[[image]] /resources/3/Final Rusty Steel.png
[[image]] /resources/3/Final Gold.png
[[image]] /resources/3/Final Copper.png
[[image]] /resources/3/Final Brass.png
[[image]] /resources/3/Final Brushed Steel.png

