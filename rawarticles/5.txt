[[id]] 5
[[languages]] en-us, pt-br

[[title]] Parallax Corrected Cubemaps
[[description<en-us>]] Like normal cubemaps but better
[[description<pt-br>]] Como cubemaps normais mas melhor
[[date]] 2024/11/13 02:16

[[section<en-us>]] Introduction
[[section<pt-br>]] Introdução

[text<en-us>]
This article was inspired by 
[[[https://seblagarde.wordpress.com/2012/09/29/image-based-lighting-approaches-and-parallax-corrected-cubemap/:::Image-based Lighting approaches and parallax-corrected cubemap]]]
[;<;>]
[text<en-us>]
This article assumes that you already know how to load and bake cubemaps.
[;<;>]

[text<pt-br>]
Esse artigo foi inspirado por
[[[https://seblagarde.wordpress.com/2012/09/29/image-based-lighting-approaches-and-parallax-corrected-cubemap/:::Image-based Lighting approaches and parallax-corrected cubemap]]]
[;<;>]
[text<pt-br>]
Esse artigo assume que você já sabe como carregar e gerar cubemaps.
[;<;>]

[[section<en-us>]] Classic Cubemap Reflection
[[section<pt-br>]] Reflexo Clássico de Cubemap

[text<en-us>]
So, how is the default way of doing cubemap reflections? well, it's quite simple:
calculate the view direction from the camera position to the fragment position,
reflect it using the reflect function with the fragment normal and done!
[;<;>]
[text<pt-br>]
Então, qual é o jeito padrão de fazer reflexos de cubemap? bom, é simples:
calcule a direção de view da posição da câmera para a posição do fragmento,
reflita usando a função "reflect" com a normal do fragmento e pronto!
[;<;>]
[code]
vec3 viewDirection = normalize(worldPosition - viewPosition);
vec3 reflectedDirection = reflect(viewDirection, normal);
vec3 reflection = texture(reflectionCubemap, reflectedDirection).rgb;
[;<;>]
[[video]] /resources/5/Classic Cubemap Reflection.mp4
[text<en-us>]
As you can see, the reflection seems to be moving with us, like if it was very far
away like the sky, which would be fine if this was a sky cubemap but this is
a local cubemap baked from a specific location.
[;<;>]
[text<pt-br>]
Como pode ver, o reflexo parece estar se movendo conosco, como se estivesse bem
longe como o céu, que seria bom se isso fosse um cubemap de céu mas isso é um
cubemap local gerado a partir de um local específico.
[;<;>]
[fine<en-us>]
Tip: When baking cubemaps disable all specular reflections from lights and other cubemaps,
because those depend on the view direction and it could look very weird when looking from
other angles, cubemaps should generally contain only diffuse light.
[;<;>]
[fine<pt-br>]
Dica: Quando estiver gerando cubemaps desative todos os reflexos de specular de luzes
e outros cubemaps pois estes dependem da direção da view e poderia ficar muito esquisito
olhando de outros ângulos, cubemaps geralmente só devem conter luz difusa.
[;<;>]
[text<en-us>]
If we draw this into paint.net, this is what we get:
[;<;>]
[text<pt-br>]
Se desenharmos isto no paint.net, é isso que temos:
[;<;>]
[[image]] /resources/5/Cubemap Reflection.png
[text<en-us>]
Because we are sampling the cubemap using only our reflected direction "R" without
taking the cubemap position into account (denoted by the ball), the cubemap ends
up sampling the wrong position denoted by "P?" instead of the correct position
denoted by "P" (which we don't have) and this is why we mostly see the ceiling
instead of the walls in the video.
[;<;>]
[text<pt-br>]
Como estamos fazendo sampling do cubemap usando apenas a direção refletida "R" sem
levar a posição do cubemap em conta (denotada pela bola), o cubemap acaba fazendo
sampling da posição incorreta denotada por "P?" ao invés da posição correta denotada
por "P" (que não temos) e é por isso que vemos grande parte do teto ao invés
das paredes no vídeo.
[;<;>]

[[section]] Parallax Corrected Cubemap

[text<en-us>]
A Parallax Corrected Cubemap solves this issue by finding the correct P using
raytracing and then sampling the cubemap using the direction from the cubemap
position to P (the C direction).
[;<;>]
[text<pt-br>]
Um Parallax Corrected Cubemap resolve esse problema encontrado o P correto
utilizando raytracing e então fazendo sampling do cubemap usando a direção
da posição do cubemap para P (a direção C).
[;<;>]

[[image]] /resources/5/Parallax Corrected Cubemap.png

[[section]] Raytracing

[text<en-us>]
Don't let the word "raytracing" scare you, even if we could generate
a BVH from our scene and use it to find P, it would be too slow and
complicated to use, instead we are going to simplify our scene
to a user defined box and then intersect a ray from inside of it.
[;<;>]
[text<pt-br>]
Não deixe a palavra "raytracing" te assustar, mesmo se pudéssemos gerar
um BVH de nossa cena e usar ele para encontrar P, seria muito lento
e complicado para se usar, ao invés nós vamos simplificar nossa cena
para um cubo definido pelo usuário e então fazer a intersecção de um raio
por dentro dele.
[;<;>]

[[subsection<en-us>]] In Code
[[subsection<pt-br>]] Em Código

[text<en-us>]
We only need a small function for intersecting a ray with a box
from the inside.
[;<;>]
[text<pt-br>]
Só precisamos de uma pequena função para fazer a intersecção de um raio
com uma caixa por dentro.
[;<;>]
[text<en-us>]
Using the code in the article mentioned at the introduction, I made
a more generic version of it and I also added a aabb check to avoid
the ray from being intersected from outside the box because I noticed
it causes a lot of graphical issues in some scenarios.
[;<;>]
[text<pt-br>]
Usando o código no artigo mencionado na introdução, eu fiz uma versão
mais genérica dele e também adicionei uma checagem de aabb para evitar
que o raio faça intersecção por fora da caixa pois percebi que causa
vários problemas gráficos em alguns cenários.
[;<;>]
[code]
//P is rayOrigin + (rayDirection * t)
//where t is the return value
//returns -1.0 if the ray is outside the box
float intersectRayInsideBox(vec3 rayOrigin, vec3 rayDirection, mat4 worldToLocal) {
    vec3 localOrigin = (worldToLocal * vec4(rayOrigin, 1.0)).xyz;
    vec3 aabbCheck = abs(localOrigin);
    if (max(aabbCheck.x, max(aabbCheck.y, aabbCheck.z)) > 1.0) {
        return -1.0;
    }
    vec3 localDirection = mat3(worldToLocal) * rayDirection;
    vec3 firstPlane = (vec3(-1.0) - localOrigin) / localDirection;
    vec3 secondPlane = (vec3(1.0) - localOrigin) / localDirection;
    vec3 furthestPlane = max(firstPlane, secondPlane);
    return min(furthestPlane.x, min(furthestPlane.y, furthestPlane.z));
}
[;<;>]
[text<en-us>]
Even if the function was made for a aabb, it actually supports any
rotated or scaled box, because we apply the inverse of the box matrix
to the ray (the worldToLocal matrix) instead of the box which is
always a 2x2x2 AABB in the perspective of the function.
[;<;>]
[text<pt-br>]
Mesmo se a função foi feita para um aabb, ela na verdade suporta
qualquer caixa rotacionada ou escalada, já que aplicamos o inverso
da matriz da caixa ao raio (a matriz worldToLocal) ao invés da caixa
que é sempre um AABB 2x2x2 na perspectiva da função.
[;<;>]
[text<en-us>]
On the CPU side, we only need to calculate the worldToLocal matrix
and send it to the shader alongside the cubemap position.
[;<;>]
[text<pt-br>]
No lado da CPU, só precisamos calcular a matriz worldToLocal
e enviá-la para o shader junto com a posição do cubemap.
[;<;>]
[code]
Vector3f position = new Vector3f(0f, 2f, 0f);
Quaternionf rotation = new Quaternionf(0f, 0f, 0f, 1f);
Vector3f halfExtents = new Vector3f(5f, 2f, 5f);

Matrix4f worldToLocal = new Matrix4f()
    .translate(position)
    .rotate(rotation)
    .scale(halfExtents)
    .invert()
    ;

Vector3f cubemapPosition = new Vector3f(0f, 1.65f, 0f);
[;<;>]
[text<en-us>]
"position" is the position of the box, "rotation" is the rotation of the box
defined by a quaternion, "halfExtents" is the half of the extensions of the
box (a box of width 10.0 has a half extent of 5.0 in the X axis) and 
"cubemapPosition" is the cubemap position where it was baked at.
[;<;>]
[text<pt-br>]
"position" é a posição da caixa, "rotation" é a rotação da caixa definida
por um quaternion, "halfExtents" é a metade das extensões da caixa
(uma caixa de comprimento 10,0 tem uma meia extensão de 5.0 no eixo X) e
"cubemapPosition" é a posição do cubemap de onde ele foi gerado.
[;<;>]
[code]
uniform mat4 cubemapWorldToLocal;
uniform vec3 cubemapPosition;
[;<;>]
[warning<en-us>]
Because the intersection only works if the fragment is inside
the box, you should always make the box slightly larger than
the area it represents.
[;<;>]
[warning<pt-br>]
Como a intersecção só funciona se o fragmento estiver dentro
da caixa, você deve fazer a caixa um pouco maior do que
a área que ela representa.
[;<;>]
[text<en-us>]
And then, we only need to intersect a ray from the fragment position
using the reflected direction to find P and sample the cubemap using
the corrected direction.
[;<;>]
[text<pt-br>]
E então, só precisamos fazer a intersecção do raio da posição do fragmento
usando a direção refletida para encontrar P e então fazer sample do cubemap
usando a direção corrigida.
[;<;>]
[code]
vec3 viewDirection = normalize(worldPosition - viewPosition);
vec3 reflectedDirection = reflect(viewDirection, normal);
vec3 reflection = vec3(0.0);
float t = intersectRayInsideBox(worldPosition, reflectedDirection, cubemapWorldToLocal);
if (t >= 0.0) {
    vec3 P = worldPosition + (reflectedDirection * t);
    vec3 correctedDirection = normalize(P - cubemapPosition);
    reflection = texture(reflectionCubemap, correctedDirection).rgb;
}
[;<;>]

[[section<en-us>]] Final Result
[[section<pt-br>]] Resultado Final

[text<en-us>]
And this is the final result:
[;<;>]
[text<pt-br>]
E esse é o resultado final:
[;<;>]
[[video]] /resources/5/Parallax Corrected Cubemap Video.mp4