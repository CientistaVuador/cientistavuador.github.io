[[id]] 2
[[languages]] en-us, pt-br

[[title<en-us>]] Field Zero Metadata - Adding metadata to your CSV files
[description<en-us>] 
This article talks about adding metadata to CSV files while still being compatible with RFC4180.
[;<;>]
[[title<pt-br>]] Metadados de Campo Zero - Adicionando metadados em seus arquivos CSV
[description<pt-br>] 
Esse artigo fala sobre adicionar metadados em seus arquivos CSV enquanto mantém compatibilidade com a RFC4180.
[;<;>]
[[date]] 2024/10/01 01:10

[[section]] TL;DR
[text<en-us>]
Use the first field for metadata purposes, with a embedded csv starting with
csv-metadata-key,csv-metadata-value as the header, set csv-type-name
if you want to set the type of your csv and csv-field-zero if you want
to set the value of the first field (the field index zero) and use empty keys as
comments or to skip a line and take care with double quotes, as one double quote
is now two and a escaped double quote is now four.
[;<;>]
[code<en-us>]
"csv-metadata-key,csv-metadata-value
csv-type-name,vectors
csv-field-zero,x
,
,""
This is a comment!
""
,
key,value
key,""value""
otherKey,""value with """"double quotes""""!""
",y,z
1,2,3
4,5,6
7,8,9
[;<;>]
[text<pt-br>]
Use o primeiro campo para propósitos de metadados, com um csv embutido começando
com csv-metadata-key,csv-metadata-value como o cabeçalho, defina csv-type-name
se você quiser definir o tipo do seu csv e csv-field-zero se quiser definir
o valor do primeiro campo (o campo índice zero) e use chaves vazias como
comentários ou para pular uma linha e tome cuidado com aspas duplas, já que
uma aspas duplas agora são duas e uma aspas duplas escapada agora são quatro.
[;<;>]
[code<pt-br>]
"csv-metadata-key,csv-metadata-value
csv-type-name,vectors
csv-field-zero,x
,
,""
Isso é um comentário
""
,
chave,valor
chave,""valor""
outraChave,""valor com """"aspas duplas""""!""
",y,z
1,2,3
4,5,6
7,8,9
[;<;>]

[[section<en-us>]] Introduction
[[section<pt-br>]] Introdução
[text<en-us>]
This article assumes that the [[[https://www.ietf.org/rfc/rfc4180.txt:::RFC4180]]] is
the right way to write and read CSV files.
[;<;>]
[text<pt-br>]
Esse artigo assume que a [[[https://www.ietf.org/rfc/rfc4180.txt:::RFC4180]]] é
o jeito certo de escrever e ler arquivos CSV.
[;<;>]

[text<en-us>]
On the internet you can find many ways to add metadata to a csv file, some of them turn your csv into
proprietary formats that only your program can understand while others require additional files,
zip files or other data formats such as JSON or XML, in this article I propose a method to add
metadata to csv files.
[;<;>]
[text<pt-br>]
Na internet você pode encontrar vários jeitos de adicionar metadados para um arquivo csv, alguns
deles transformam seu csv em formatos proprietários que apenas o seu programa pode entender
enquanto outros precisam de arquivos adicionais, arquivos zip ou outros formatos de dados
como JSON ou XML, nesse artigo eu proponho um método para adicionar metadados para
arquivos csv.
[;<;>]

[[section<en-us>]] Alternatives
[[section<pt-br>]] Alternativas

[[subsection<en-us>]] # as comments or metadata
[[subsection<pt-br>]] # como comentários ou metadados
[text<en-us>]
This seems to be the most common way to add metadata or comments to a csv, it either requires
a custom parser or preprocessing, it has no standard and can be quite ambiguous
as a field starting with # can also be a valid field.
[;<;>]
[text<pt-br>]
Esse parece ser o jeito mais comum de adicionar metadados ou comentários para um csv, ele requer
um parser customizado ou pré-processamento, não possui padrão e pode ser meio ambíguo
já que um campo começando com # também pode ser um campo válido.
[;<;>]
[code<en-us>]
#This is my csv file!
#type=vectors
x,y,z
1,2,3
4,5,6
7,8,9
[;<;>]
[code<pt-br>]
#Isso é meu arquivo csv!
#tipo=vetores
x,y,z
1,2,3
4,5,6
7,8,9
[;<;>]

[[subsection<en-us>]] Metadata file/Zip file
[[subsection<pt-br>]] Arquivo de metadados/Arquivo Zip
[text<en-us>]
A file for metadata purposes is carried together with the csv file,
usually with the same name as the csv file plus a suffix (-meta.type)
and uses any data format, both files can then be bundled
in a zip file.
[;<;>]
[text<pt-br>]
Um arquivo para propósitos de metadados é carregado junto com o arquivo csv
normalmente com o mesmo nome do arquivo csv mais um sufixo (-meta.tipo) e
usa qualquer formato de dados, ambos os arquivos podem ser juntados
em um arquivo zip.
[;<;>]
[code<en-us>]
my-csv.csv:
x,y,z
1,2,3
4,5,6
7,8,9

my-csv-meta.xml:
<meta>
    <description>This is my csv file!</description>
    <type>vectors</type>
</meta>

my-csv.zip:
    my-csv.csv
    my-csv-meta.xml
[;<;>]
[code<pt-br>]
meu-csv.csv:
x,y,z
1,2,3
4,5,6
7,8,9

meu-csv-meta.xml:
<meta>
    <descricao>Isso é meu arquivo csv!</descricao>
    <tipo>vetores</tipo>
</meta>

meu-csv.zip:
    meu-csv.csv
    meu-csv-meta.xml
[;<;>]

[[subsection]] W3C
[text<en-us>]
They [[[https://www.w3.org/TR/tabular-data-model/#embedded-metadata:::tried]]],
I never heard of this W3C format until I started searching about metadata in
CSV files.
[;<;>]
[text<pt-br>]
Eles [[[https://www.w3.org/TR/tabular-data-model/#embedded-metadata:::tentaram]]] (em inglês),
eu nunca ouvi falar desse formato da W3C até que comecei a pesquisar sobre metadados
em arquivos csv.
[;<;>]
[code]
#publisher,W3C
#updated,2015-10-17T00:00:00Z
#name,sensor,temperature
#datatype,string,float
sensor,temperature
s-1,25.5
[;<;>]

[[subsection<en-us>]] References
[[subsection<pt-br>]] Referências (em inglês)
[ulist]
,[[[https://stackoverflow.com/questions/18362864/adding-metadata-identifier-data-to-a-csv-file:::Adding metadata / identifier data to a CSV file?]]]
,[[[https://stackoverflow.com/questions/30739931/store-metadata-in-csv-file:::Store metadata in CSV file]]]
,[[[https://stackoverflow.com/questions/58987503/how-to-add-metadata-to-a-csv-file:::How to add metadata to a csv file?]]]
,[[[https://gist.github.com/seece/97d02d6518db8b9e4c5b81fc686553e2:::A Straightforward Way To Extend CSV With Metadata]]]
[;<;>]

[[section<en-us>]] My alternative
[text<en-us>]
So, if we want to add metadata to our csv files, it must be a single csv
file, it must not use other data formats, it must be compatible with a csv
parser that can read RFC4180, it has to be identifiable and
simple enough that people would consider to use it.
[;<;>]
[[section<pt-br>]] Minha alternativa
[text<pt-br>]
Então, se queremos adicionar metadados em nossos arquivos csv, ele deve continuar
sendo um único arquivo csv, ele não deve usar outros formatos de dados, ele deve
ser compatível com um parser que consiga ler RFC4180, ele tem que ser identificável
e simples o bastante para que as pessoas considerem o seu uso.
[;<;>]

[[subsection<en-us>]] Field Zero
[text<en-us>]
After thinking about it, there's no better place to add metadata
than placing into the first field of the csv file.
[;<;>]
[code<en-us>]
"metadata",y,z
1,2,3
4,5,6
7,8,9
[;<;>]
[[subsection<pt-br>]] Campo Zero
[text<pt-br>]
Depois de pensar sobre, não há melhor lugar
para adicionar metadados do que se não
no primeiro campo do arquivo csv.
[;<;>]
[code<pt-br>]
"metadados",y,z
1,2,3
4,5,6
7,8,9
[;<;>]

[[subsection<en-us>]] No other data formats
[text<en-us>]
Instead of using other data formats such as json or xml, we use a embedded 
csv for it, this eliminates the requirement for other data formats.
[;<;>]
[[subsection<pt-br>]] Sem outros formatos de dados
[text<pt-br>]
Ao invés de usar outros formatos de dados como json ou xml, nós
usamos um csv embutido para isso, isso elimina o requerimento para
outros formatos de dados.
[;<;>]
[code]
"a,b,c,d",y,z
1,2,3
4,5,6
7,8,9
[;<;>]

[[subsection<en-us>]] Identifiable
[text<en-us>]
We use a csv header for it, this can only contain a key and a value,
any other header is not valid and should be processed as a normal field,
even if the header is quite unique, it is still a good idea for parsers 
to add a option for reading it as text instead of metadata, redefinition
of fields is allowed and is done in order of appearance, because this
is a embedded csv file, double quotes must be written as two instead of one
and four instead of two inside of quoted fields.
[;<;>]
[code<en-us>]
"csv-metadata-key,csv-metadata-value
a,10
b,20
x,""field, with, commas""
y,""field with """"double quotes""""!""
c,30
c,40
",y,z
1,2,3
4,5,6
7,8,9
[;<;>]
[[subsection<pt-br>]] Identificável
[text<pt-br>]
Nós usamos um cabeçalho de csv para isso que só pode ter uma chave e um valor,
qualquer outro cabeçalho não é válido e deve ser processado como um campo
normal, mesmo que o cabeçalho seja meio único, ainda é uma boa ideia
para os parsers adicionarem uma opção para ler como texto ao invés de metadados,
redefinição de campos é permitida e é feita na ordem de aparição, como isso é um
arquivo csv embutido, aspas duplas devem ser escritas como duas ao invés de uma
e quatro ao invés de duas dentro de campos com aspas duplas.
[;<;>]
[code<pt-br>]
"csv-metadata-key,csv-metadata-value
a,10
b,20
x,""campo, com, vírgulas""
y,""campo com """"aspas duplas""""!""
c,30
c,40
",y,z
1,2,3
4,5,6
7,8,9
[;<;>]

[[subsection<en-us>]] Identification of the CSV data
[text<en-us>]
We add a optional "csv-type-name" for type
identification, similar to XML Namespaces, this
allows a csv file to be easily distinguishable from each
other, as it is for XML I recommend using a URL for it
but any string is valid, even an empty one or nothing.
[;<;>]
[[subsection<pt-br>]] Identificação dos dados CSV
[text<pt-br>]
Nós adicionamos um opcional "csv-type-name" para identificação
de tipos, similar aos namespaces de XML, isso permite que um
arquivo csv seja facilmente distinguível de outro, assim como é
pra XML eu recomendo usar uma URL para isso mas qualquer string
é válida, até uma vazia ou nada.
[;<;>]
[code]
"csv-metadata-key,csv-metadata-value
csv-type-name,https://example.com/vectors.txt
",y,z
1,2,3
4,5,6
7,8,9
[;<;>]

[[subsection<en-us>]] Field Zero Value
[text<en-us>]
We add a optional "csv-field-zero" for defining
the value of the field zero (the first field),
if not present, a empty string is assumed.
[;<;>]
[[subsection<pt-br>]] Valor do Campo Zero
[text<pt-br>]
Nós adicionamos um opcional "csv-field-zero" para definir
o valor do campo zero (o primeiro campo), se não presente
uma string vazia é assumida.
[;<;>]
[code]
"csv-metadata-key,csv-metadata-value
csv-type-name,https://example.com/vectors.txt
csv-field-zero,x
",y,z
1,2,3
4,5,6
7,8,9
[;<;>]

[[subsection<en-us>]] Compatibility
[text<en-us>]
If it is needed to remain compatible with a system,
we can move all data to the right and remove the "csv-field-zero",
this does not affect anything, it only changes the structure of the
csv itself and makes the header reappear correctly again.
[;<;>]
[[subsection<pt-br>]] Compatibilidade
[text<pt-br>]
Se é necessário manter compatível com um sistema, podemos
mover todos os dados para a direita e remover o "csv-field-zero",
isso não afeta nada, altera apenas a estrutura do csv em si
e faz o cabeçalho reaparecer corretamente novamente.
[;<;>]
[code]
"csv-metadata-key,csv-metadata-value
csv-type-name,https://example.com/vectors.txt
",x,y,z
,1,2,3
,4,5,6
,7,8,9
[;<;>]

[[subsection<en-us>]] Single-line and Multiline Comments and Line Skips
[text<en-us>]
The fact that we allowed redefinition of fields means that we
can now use empty keys as single-line or multiline comments or
to skip a line, care should be taken with double quotes,
as this is still a normal field.
[;<;>]
[code<en-us>]
"csv-metadata-key,csv-metadata-value
csv-type-name,https://example.com/vectors.txt
,
,Single line comment!
,
,""
This is
a multiline
comment!
""
",x,y,z
,1,2,3
,4,5,6
,7,8,9
[;<;>]
[[subsection<pt-br>]] Comentários de uma ou mais linhas e pulo de linhas
[text<pt-br>]
O Fato de que permitimos a redefinição de campos significa que agora
podemos utilizar chaves vazias como comentários de uma ou mais linhas ou
para pular linhas, cuidado deve ser tomado com as aspas duplas, já
que isso ainda é um campo normal.
[;<;>]
[code<pt-br>]
"csv-metadata-key,csv-metadata-value
csv-type-name,https://example.com/vectors.txt
,
,Comentário de uma linha!
,
,""
Isso é
um comentário
de várias linhas!
""
",x,y,z
,1,2,3
,4,5,6
,7,8,9
[;<;>]

[[section<en-us>]] In code
[[section<pt-br>]] Em código

[text<en-us>]
Reading and Writing becomes quite simple, the CSV parser I am using
was made by myself with less than 100 lines, which is one of the main
advantages of CSV, the class accepts null values as empty strings.
[;<;>]
[text<pt-br>]
Escrever e ler se torna bem simples, o parser de CSV que estou usando
foi feito por mim mesmo com menos de 100 linhas, que é uma das
principais vantagens de CSV, a classe aceita valores null como strings
vazias.
[;<;>]

[[subsection<en-us>]] Reading
[[subsection<pt-br>]] Lendo
[code<en-us>]
CSV csv = CSV.read(...);

String keyHeader = "csv-metadata-key";
String valueHeader = "csv-metadata-value";
String header = keyHeader + "," + valueHeader;
String quotedHeader = "\"" + keyHeader + "\",\"" + valueHeader + "\"";

Map<String, String> metadata = new LinkedHashMap<>();
String fieldZero = csv.get(0, 0);

//check if the field zero starts with the header
if (fieldZero.startsWith(header) || fieldZero.startsWith(quotedHeader)) {

    //read the metadata as csv and check if the header is valid
    CSV csvMetadata = CSV.read(fieldZero);
    if (csvMetadata.getNumberOfFields() == 2 
            && csvMetadata.get(0, 0).equals(keyHeader)
            && csvMetadata.get(1, 0).equals(valueHeader)
            ) {

        //read the metadata, skipping the header
        for (int metaRecord = 1; metaRecord < csvMetadata.getNumberOfRecords(); metaRecord++) {
            String k = csvMetadata.get(0, metaRecord);
            String v = csvMetadata.get(1, metaRecord);
            //remove comments
            if (k.isEmpty()) {
                continue;
            }
            metadata.put(k, v);
        }

        //set the field zero
        csv.set(0, 0, metadata.get("csv-field-zero"));
    }
}
System.out.println("Type: "+metadata.get("csv-type-name"));
System.out.println("Field zero: "+csv.get(0, 0));
[;<;>]
[code<pt-br>]
CSV csv = CSV.read(...);

String keyHeader = "csv-metadata-key";
String valueHeader = "csv-metadata-value";
String header = keyHeader + "," + valueHeader;
String quotedHeader = "\"" + keyHeader + "\",\"" + valueHeader + "\"";

Map<String, String> metadata = new LinkedHashMap<>();
String fieldZero = csv.get(0, 0);

//cheque se o campo começa com o cabeçalho
if (fieldZero.startsWith(header) || fieldZero.startsWith(quotedHeader)) {

    //leia os metadados como csv e cheque se o cabeçalho é válido
    CSV csvMetadata = CSV.read(fieldZero);
    if (csvMetadata.getNumberOfFields() == 2 
            && csvMetadata.get(0, 0).equals(keyHeader)
            && csvMetadata.get(1, 0).equals(valueHeader)
            ) {

        //leia os metadados, ignorando o cabeçalho
        for (int metaRecord = 1; metaRecord < csvMetadata.getNumberOfRecords(); metaRecord++) {
            String k = csvMetadata.get(0, metaRecord);
            String v = csvMetadata.get(1, metaRecord);
            //remove comentários
            if (k.isEmpty()) {
                continue;
            }
            metadata.put(k, v);
        }

        //define o campo zero
        csv.set(0, 0, metadata.get("csv-field-zero"));
    }
}
System.out.println("Type: "+metadata.get("csv-type-name"));
System.out.println("Field zero: "+csv.get(0, 0));
[;<;>]

[[subsection<en-us>]] Writing
[[subsection<pt-br>]] Escrevendo
[code<en-us>]
CSV csv = CSV.read(...);

String keyHeader = "csv-metadata-key";
String valueHeader = "csv-metadata-value";
...
Map<String, String> metadata = new LinkedHashMap<>();
...

//set field zero
metadata.put("csv-field-zero", csv.get(0, 0));

//create a new csv with the size of metadata plus 1
CSV csvMetadata = new CSV(null, 2, metadata.size() + 1);

//write the header
csvMetadata.set(0, 0, keyHeader);
csvMetadata.set(1, 0, valueHeader);

//write the metadata
int index = 1;
for (Map.Entry<String, String> e:metadata.entrySet()) {
    csvMetadata.set(0, index, e.getKey());
    csvMetadata.set(1, index, e.getValue());
    index++;
}

//output to field zero
csv.set(0, 0, csvMetadata.toString());
System.out.println(csv.toString());
[;<;>]
[code<pt-br>]
CSV csv = CSV.read(...);

String keyHeader = "csv-metadata-key";
String valueHeader = "csv-metadata-value";
...
Map<String, String> metadata = new LinkedHashMap<>();
...

//define o campo zero
metadata.put("csv-field-zero", csv.get(0, 0));

//cria um novo csv com o tamanho de metadata mais 1
CSV csvMetadata = new CSV(null, 2, metadata.size() + 1);

//escreve o cabeçalho
csvMetadata.set(0, 0, keyHeader);
csvMetadata.set(1, 0, valueHeader);

//escreve o metadata
int index = 1;
for (Map.Entry<String, String> e:metadata.entrySet()) {
    csvMetadata.set(0, index, e.getKey());
    csvMetadata.set(1, index, e.getValue());
    index++;
}

//escreve a saída no campo zero
csv.set(0, 0, csvMetadata.toString());
System.out.println(csv.toString());
[;<;>]

[[section<en-us>]] Security Risks
[text<en-us>]
Embedding CSVs inside of CSVs can become a potential DoS attack
vector due to how double quotes are escaped, for every depth level
the amount of required double quotes is doubled, at depth 32, the 
required amount of double quotes for a single double quote would
need gigabytes of character data to escape it.
[;<;>]
[text<en-us>]
If you really need to embed multiple CSVs inside of a CSV file
without additional files, the best way would be to create a file
system using a single zip file, write all of your CSVs to it and
then embed the zip as base64 in a master CSV, care should be taken
as zip bombs can still be a possibility.
[;<;>]
[code<en-us>]
"csv-metadata-key,csv-metadata-value
csv-type-name,https://example.com/vectors.txt
myOtherCsvsData,c2Rmc2Rmc2Rmc2RmZXdyZXdyY2J2eHZuY2ZqbnRyeXVqdHk3aTZ5dWtqaGcsbWd2bnZjYnhjdmFzZFFFVw==
myOtherCsvsRoot,root.csv
",x,y,z
,1,2,3
,4,5,6
,7,8,9
[;<;>]
[[section<pt-br>]] Riscos de segurança
[text<pt-br>]
Embutir CSVs dentro de CSVs pode se tornar um potencial vetor
de ataque DoS por causa de como as aspas duplas são escapadas, para
cada nível de profundidade a quantidade de aspas duplas necessárias
é dobrada, na profundidade 32, a quantidade necessária de aspas duplas
para uma única aspas duplas precisaria de gigabytes de caracteres
para escapar ela.
[;<;>]
[text<pt-br>]
Se você realmente precisa embutir múltiplos CSVs dentro de um arquivo
CSV sem arquivos adicionais, o melhor jeito seria criar um file system
com um arquivo zip, escrever todos os seus CSVs nele e então embutir
o zip como base64 em um csv mestre, cuidado deve ser tomado
já que zip bombs ainda são uma possibilidade.
[;<;>]
[code<pt-br>]
"csv-metadata-key,csv-metadata-value
csv-type-name,https://example.com/vectors.txt
meusOutrosCsvsDados,c2Rmc2Rmc2Rmc2RmZXdyZXdyY2J2eHZuY2ZqbnRyeXVqdHk3aTZ5dWtqaGcsbWd2bnZjYnhjdmFzZFFFVw==
meusOutrosCsvsRaiz,raiz.csv
",x,y,z
,1,2,3
,4,5,6
,7,8,9
[;<;>]

[[section<en-us>]] On External Editors
[text<en-us>]
If correctly escaped, any editor that supports the RFC4180 should
be able to read and preserve the metadata.
[;<;>]
[[section<pt-br>]] Em editores externos
[text<pt-br>]
Se corretamente escapado, qualquer editor que suporte a RFC4180 deve
conseguir ler e preservar os metadados.
[;<;>]

[[subsection]] Google Sheets
[text<en-us>]
Google Sheets was the best one, seems to fully follow
the RFC4180 in importing and exporting csv files.
[;<;>]
[text<pt-br>]
Google Sheets foi o melhor, parece seguir
a RFC4180 em importar e exportar arquivos csv.
[;<;>]

[[subsection]] LibreOffice
[text<en-us>]
LibreOffice was able to import/export correctly but 
it has a strange behaviour to replace double quotes 
with curved double quotes on the editor and the lack
of smooth scrolling makes it annoying to edit
large metadata fields.
[;<;>]
[text<pt-br>]
LibreOffice conseguiu importar/exportar corretamente mas
ele tem um estranho comportamento de trocar aspas duplas
por aspas duplas curvadas no editor e a falta de um scroll
suave torna chata a edição de grandes campos de metadados.
[;<;>]

[[subsection]] Excel
[text<en-us>]
Excel never supported RFC4180 as far as I know, if
things did not change, excel should still be the devil of
csv files, generating different csv files that depend
on which country you are, making sure that your life as a
programmer will be a pain.
[;<;>]
[text<pt-br>]
Excel nunca suportou a RFC4180 até onde eu sei, se
as coisas não mudaram, excel ainda deve ser o diabo dos
arquivos csv, gerando arquivos diferentes que dependem
de qual país você está, garantindo que sua vida como
programador será dolorida.
[;<;>]

[[subsection<en-us>]] Other Online Editors
[[subsection<pt-br>]] Outros Editores Online
[text<en-us>]
I was able to find a bunch of small online editors
of csv files, all of the ones I tested seems to
follow the RFC4180.
[;<;>]
[text<pt-br>]
Eu consegui encontrar vários editores online pequenos
de arquivos csv, todos os que eu testei parecem
seguir a RFC4180.
[;<;>]